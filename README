Lumgua is a simple functional programming language.  Sample code:

  (define compile
    (func (exp)
      (assemble
       (match (first (comp `(func () ,(macroexpandall exp))
			   '(env nil nil)
			   nil nil))
	 ((close template)
	  template)))))


Getting Started

To try it out, you must first build the statically compiled tools,
which are written in Go.  If you have Go set up, then maybe the
following will work:

  $ bash refresh.bash

If the tools -- server, lumgua, and lispin -- were built successfully,
then you can do something like this:

  1. Open up three terminal windows.
  2. Run server in the first terminal:
       $ ./server
  3. Run lumgua in the second terminal:
       $ ./lumgua core compile text debug repl
  4. Try an evaluation in the third terminal.
       $ echo '(+ 1 2)' | ./lispin
  5. Look to see if the evaluated result was printed in the second
     terminal.

If you use emacs, take a look at lumgua.el.  It can be used to
interactively evaluate Lumgua expressions.  It's pretty
straightforward but I won't put instructions here.


The Language

Lumgua is a very simple Scheme/ML hybrid.

Scheme similarities:

  * S-expression syntax and data.
  * No type system.
  * Same calling convention.

ML similarities:

  * No macros.
  * No variable mutation.
  * Early binding.
  * Lists are immutable.

Some important similarities shared with both Scheme and ML:

  * Tail-calls.
  * Continuations.
  * Pattern matching.
  * Call-by-value evaluation.

Lumgua is also significantly different from both Scheme and ML.  For
example:

  * The set of data constructors is fixed.
  * There is no language definition.
  * Tail-call compilation is subject to programmer control.


The Implementation

The implementation has a few useful features beyond mere evaluation:

  * Interaction with emacs.
  * Reasonably useful stack traces.
  * Disassembly of functions.
  * Bootstrapped compiler.

The following publications have been used extensively for inspiration:

  * Paradigms of Artificial Intelligence Programming by Peter Norvig.
  * Three Implementation Models for Scheme by R. Kent Dybvig.
