Lumgua is a simple programming language.  Sample code:

  (define compile
    (func (exp)
      (assemble
       (match (first (comp `(func () ,(macroexpandall exp))
			   '(env nil nil)
			   nil nil))
	 ((close template)
	  template)))))


Getting Started

Try the following:

  term1:
    $ bash lumgua.bash
    entering REPL

  term2:
    $ echo '(log "hello world")' | ./lispin
    $ ./lispin
    (log "hello again")
    ^D
    $ emacs # see below

If you load lumgua.el into an emacs buffer, you can use C-c C-e to
send the expression before point to a running Lumgua process.


The Language

Lumgua is a very simple Scheme/ML hybrid.

Scheme similarities:

  * S-expression syntax and data.
  * No type system.

ML similarities:

  * No macros.
  * No variable mutation.
  * Lists are immutable and never "dotted".

Some important similarities shared with both Scheme and ML:

  * Tail-calls.
  * Continuations.
  * Pattern matching.
  * Call-by-value evaluation.

Lumgua is also significantly different from both Scheme and ML.  For
example:

  * The set of data constructors is fixed.
  * There is no language definition.
  * Tail-call compilation is subject to programmer control.


The Implementation

The implementation has a few useful features beyond mere evaluation:

  * Interaction with emacs.
  * Reasonably useful stack traces.
  * Disassembly of functions.

The following publications have been used extensively for inspiration:

  * Paradigms of Artificial Intelligence Programming by Peter Norvig.
  * Three Implementation Models for Scheme by R. Kent Dybvig.
